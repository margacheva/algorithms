# Алгоритм решения заключается в том, что мы создаем список,
# а потом в нем заменяем элементы на нужные нам
# сложность O(n)
class Solution:
    def getMaximumGenerated(self, n: int) -> int:
        nums = [0] * (n + 1)  # создаем список, состоящий из нулей
        if n == 0:  # сразу в случае нуля элементов возвращаем нуль
            return 0
        else:
            nums[1] = 1  # второй нуль в нашем списке меняем на единицу
            for i in range(2, n + 1):  # начинаем с третьего элемента и до числа,
                # большего данного списка ня один
                if (i % 2 == 0):  # если индекс четный
                    nums[i] = nums[i // 2]  # то элемент в нашем созданном списке мы заменяем на элемент из
                    # данного списка с индексом пополам

                else:
                    nums[i] = nums[i // 2] + nums[(i // 2) + 1]  # если элемент нечетный,
                    # то элемент в нашем списке с тем же индексом мы заменяем на сумму элементов с индексом
                    # поделенным на два и элемента с индексом, поделенным на два и увеличенного на один

        return max(nums)  # самое больше число в нашем созданном списке и будет ответом
